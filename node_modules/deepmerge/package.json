{
  "_args": [
    [
      {
        "raw": "deepmerge@~1.3.2",
        "scope": null,
        "escapedName": "deepmerge",
        "name": "deepmerge",
        "rawSpec": "~1.3.2",
        "spec": ">=1.3.2 <1.4.0",
        "type": "range"
      },
      "/Users/ailinliu/alin-github/webdriverio-workshop/node_modules/webdriverio"
    ]
  ],
  "_from": "deepmerge@>=1.3.2 <1.4.0",
  "_id": "deepmerge@1.3.2",
  "_inCache": true,
  "_location": "/deepmerge",
  "_nodeVersion": "7.2.1",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/deepmerge-1.3.2.tgz_1485533636702_0.6398952228482813"
  },
  "_npmUser": {
    "name": "tehshrike",
    "email": "me@JoshDuff.com"
  },
  "_npmVersion": "3.10.10",
  "_phantomChildren": {},
  "_requested": {
    "raw": "deepmerge@~1.3.2",
    "scope": null,
    "escapedName": "deepmerge",
    "name": "deepmerge",
    "rawSpec": "~1.3.2",
    "spec": ">=1.3.2 <1.4.0",
    "type": "range"
  },
  "_requiredBy": [
    "/webdriverio"
  ],
  "_resolved": "https://registry.npmjs.org/deepmerge/-/deepmerge-1.3.2.tgz",
  "_shasum": "1663691629d4dbfe364fa12a2a4f0aa86aa3a050",
  "_shrinkwrap": null,
  "_spec": "deepmerge@~1.3.2",
  "_where": "/Users/ailinliu/alin-github/webdriverio-workshop/node_modules/webdriverio",
  "author": {
    "name": "Nick Fisher"
  },
  "bugs": {
    "url": "https://github.com/KyleAMathews/deepmerge/issues"
  },
  "dependencies": {},
  "description": "A library for deep (recursive) merging of Javascript objects",
  "devDependencies": {
    "jsmd": "0.3.1",
    "tap": "~7.1.2"
  },
  "directories": {},
  "dist": {
    "shasum": "1663691629d4dbfe364fa12a2a4f0aa86aa3a050",
    "tarball": "https://registry.npmjs.org/deepmerge/-/deepmerge-1.3.2.tgz"
  },
  "engines": {
    "node": ">=0.10.0"
  },
  "gitHead": "bac0e9ffe72e3fda82608527a463bda5e2eae4b5",
  "homepage": "https://github.com/KyleAMathews/deepmerge",
  "keywords": [
    "merge",
    "deep",
    "extend",
    "copy",
    "clone",
    "recursive"
  ],
  "license": "MIT",
  "main": "index",
  "maintainers": [
    {
      "name": "kylemathews",
      "email": "mathews.kyle@gmail.com"
    },
    {
      "name": "macdja38",
      "email": "jakeincanada@icloud.com"
    },
    {
      "name": "nfisher",
      "email": "nfisher@trafficland.com"
    },
    {
      "name": "tehshrike",
      "email": "me@JoshDuff.com"
    }
  ],
  "name": "deepmerge",
  "optionalDependencies": {},
  "readme": "deepmerge\n=========\n\n> ~550B gzipped, ~1.0kB minified\n\nMerge the enumerable attributes of two objects deeply.\n\nexample\n=======\n\n<!--js\nvar merge = require('./')\n-->\n\n```js\nvar x = {\n    foo: { bar: 3 },\n    array: [{\n        does: 'work',\n        too: [ 1, 2, 3 ]\n    }]\n}\n\nvar y = {\n    foo: { baz: 4 },\n    quux: 5,\n    array: [{\n        does: 'work',\n        too: [ 4, 5, 6 ]\n    }, {\n        really: 'yes'\n    }]\n}\n\nvar expected = {\n    foo: {\n        bar: 3,\n        baz: 4\n    },\n    array: [{\n        does: 'work',\n        too: [ 1, 2, 3, 4, 5, 6 ]\n    }, {\n        really: 'yes'\n    }],\n    quux: 5\n}\n\nmerge(x, y) // => expected\n```\n\nmethods\n=======\n\n```\nvar merge = require('deepmerge')\n```\n\nmerge(x, y, [options])\n-----------\n\nMerge two objects `x` and `y` deeply, returning a new merged object with the\nelements from both `x` and `y`.\n\nIf an element at the same key is present for both `x` and `y`, the value from\n`y` will appear in the result.\n\nMerging creates a new object, so that neither `x` or `y` are be modified.  However, child objects on `x` or `y` are copied over - if you to copy all values, you must pass `true` to the clone option.\n\nmerge.all(arrayOfObjects, [options])\n-----------\n\nMerges two or more objects into a single result object.\n\n```js\nvar x = { foo: { bar: 3 } }\nvar y = { foo: { baz: 4 } }\nvar z = { bar: 'yay!' }\n\nvar expected = { foo: { bar: 3, baz: 4 }, bar: 'yay!' }\n\nmerge.all([x, y, z]) // => expected\n```\n\n### options\n\n#### arrayMerge\n\nThe merge will also merge arrays and array values by default.  However, there are nigh-infinite valid ways to merge arrays, and you may want to supply your own.  You can do this by passing an `arrayMerge` function as an option.\n\n```js\nfunction concatMerge(destinationArray, sourceArray, options) {\n\tdestinationArray // => [1, 2, 3]\n\tsourceArray // => [3, 2, 1]\n\toptions // => { arrayMerge: concatMerge }\n\treturn destinationArray.concat(sourceArray)\n}\nmerge([1, 2, 3], [3, 2, 1], { arrayMerge: concatMerge }) // => [1, 2, 3, 3, 2, 1]\n```\n\n#### clone\n\nDefaults to `false`.  If `clone` is `true` then both `x` and `y` are recursively cloned as part of the merge.\n\ninstall\n=======\n\nWith [npm](http://npmjs.org) do:\n\n```sh\nnpm install deepmerge\n```\n\ntest\n====\n\nWith [npm](http://npmjs.org) do:\n\n```sh\nnpm test\n```\n\nlicense\n=======\n\nMIT\n",
  "readmeFilename": "README.markdown",
  "repository": {
    "type": "git",
    "url": "git://github.com/KyleAMathews/deepmerge.git"
  },
  "scripts": {
    "test": "tap test/*.js && jsmd README.markdown"
  },
  "version": "1.3.2"
}
